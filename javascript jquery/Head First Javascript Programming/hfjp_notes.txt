



global versus local variables
not declaring them will make them global

do some experiments with returning values
pages 136
- return will stop the function and return the value

pages 140-143



use the for (var = 0; i < scores.length; i++) version for loops
page 180

verbosity++
page 186

adding and removing from arrays
.push
page 191

objects (variables)
- state (properties)
- behaviour (methods)

try and make everything an object / modularfy it
- think in terms of objects. not proceedures
- well designed objects 'abstract' the details of how to get the work done with the object


Just remember the intent of each (undefined and null), and know that it is most common to use null in places where an object should be but one can’t be created or found, and it is most common to find undefined when you have a variable that hasn’t been initialized, or an object with a missing property, or an array with a missing value.
page 270

use === strict


model view controller

model = holds the state of things. ie their values and what not
view = updates the display
controller = handles input

pg 369



One of the benefits of breaking up the code into objects and giving each object only one responsibility is
that we can test each object to make sure it’s doing its job correctly.

pg 375

The Head First series of books aim to make learning fun by adding more light hearted things like jokes and funny pictures to their stuff so you dont get completely bored by some very rigid and dry textbook. Head First Javascript Programming is their intermediate Javascript book.

At first glace it would seem like this book has a lot more fluff compared to something like A Smarter Way To Learn Javascript (ASWTLJ) and I mean thats its whole schtick, but it does make you sometimes want them to cut to the chase. Where it does excel I think is setting up and explaining object oriented programming (OOP). While ASWTLJ had great descriptions on objects themselves, this one goes into the thought process behind OOP and introduces the Model View Controller (MVC) concept very well.

And once it does get going it is actually a really great book on Javascript programming. About half way through it really picks up speed and fills in a lot of the deeper programming knowledge that the ASWTLJ just lightly touches. It really tries to get you to stop thinking as a scripter and start thinking as an object oriented programmer.

It explains the model view controller concept which was something I had heard of but was not 100% familiar with. The model holds the state of things, ie their values and what not. The view updates the display, ie what people see. And the controller handles input.

It explains verbosity and chaining (ie cutting down the amount of code you use and using chaining to put together references with less code); truthy and falsey (everything returns true except for undefined, null, 0, an empty string, and NaN); and goes into describing how OOP Javascript is written to react to events and how to write handle functions and pass events to them. It explains the difference between function declarations (defines a function without setting it as a variable) and function expressions (ie var a = function(){} ...etc ). And preaches the idea of making each function only do one specific thing. 

There is a lot of discussion on scope (ie local vs global values), lexical scope (ie how variables are resolved in nested functions. Basically, inner levels can access outer levels), and hoisting (how Javascript moves all variable and functions to the top of the current scope).

The trickiest part for me, and from what I gather a lot of other developers, was getting my head around the concept of closures. Closures are just functions that have an inner reference to a local variable that allows you to access it after the variable has fallen out of scope.

I actually found a great video which describes them succintly. 

"A JavaScript closure is a function that has a pointer reference to a free variable. A free variable is one that has fallen out of scope after its parent function has returned. However, if that outer function still has some reference to the free var (normally through a function that gets returned, or through a method property), the variable will not get garbage collected because it will have a non-zero reference count. Thus, from outside the function, we can still access the inner variable by means of the closure."
https://www.youtube.com/watch?v=b2AcxL88DoI

Overall, this is a great book to take your javascript skills from beginner to intermediate. The introduction of object oriented programming concepts was very easy to understand and really eye opening. I highly recommend this book.

[pacTxt]<a href="https://github.com/pacificano/learning/tree/master/javascript%20jquery/A%20Smarter%20Way%20To%20Learn/Objects">You can see my code notes for A Smarter Way To Learn Javascript here.</a>
[/pacTxt]





verbosity and chaining
pg 385



handler functions
passing events
pg 438

Most JavaScript code is written to react to events.
pg 458



function declarations / expressions
declarations have a name
created first

expression are set as variables

❏ Function declarations are the tried and true way to create functions.
❏ You always want to use function declarations because they get evaluated earlier.
page 476


If we have to deal with these complexities then serveCustomer is quickly going to become a large function that is a lot more about managing drinks than serving customers, and when we design functions, a good rule of thumb is to have them do only one thing, but do it really well.
pg491



anonymous functions, scope
pg515

is it more complicated to use?
pg520, pg522

hoisting
pg524

lexical scope
pg528

closures
pg535

You create a closure whenever you have a reference to a function that has free variables, and that function is executed outside of the context in which it was created.
Another way we can create a closure is to pass a function to a function. 
pg541

= good explanation https://www.youtube.com/watch?v=yiEeiMN2Khs
= even better https://www.youtube.com/watch?v=iSlSxDNarDY
	- window.varName will give you global scope



constructor names start with a Capital Letter
pg 572

instanceof
pg 583



prototypal inheritence
pg 609

prototypes = functions/properties that can be shared by objects

hasOwnProperty
p626

chaining prototypes
p635

setting prototype constructor value
p642

.call method
p643



recursion
p674

