global versus local variables
not declaring them will make them global

do some experiments with returning values
pages 136
- return will stop the function and return the value

pages 140-143



use the for (var = 0; i < scores.length; i++) version for loops
page 180

verbosity++
page 186

adding and removing from arrays
.push
page 191

objects (variables)
- state (properties)
- behaviour (methods)

try and make everything an object / modularfy it
- think in terms of objects. not proceedures
- well designed objects 'abstract' the details of how to get the work done with the object


Just remember the intent of each (undefined and null), and know that it is most common to use null in places where an object should be but one can’t be created or found, and it is most common to find undefined when you have a variable that hasn’t been initialized, or an object with a missing property, or an array with a missing value.
page 270

use === strict


model view controller

model = holds the state of things. ie their values and what not
view = updates the display
controller = handles input

pg 369



One of the benefits of breaking up the code into objects and giving each object only one responsibility is
that we can test each object to make sure it’s doing its job correctly.

pg 375


=== this book has a lot more fluff and i mean thats its whole schtick, being a bit more light hearted and 'fun' than typical workbooks. but it does make you sometimes want them to cut to the chase. where it does excel i think is setting up and explaining object oriented programming. while the other book had great descriptions on objects themselves, this one goes into the thought process behind OOP and introduces the MVC model view controller concept very well.



verbosity and chaining
pg 385



handler functions
passing events
pg 438

Most JavaScript code is written to react to events.
pg 458



function declarations / expressions
declarations have a name
created first

expression are set as variables

❏ Function declarations are the tried and true way to create functions.
❏ You always want to use function declarations because they get evaluated earlier.
page 476


If we have to deal with these complexities then serveCustomer is quickly going to become a large function that is a lot more about managing drinks than serving customers, and when we design functions, a good rule of thumb is to have them do only one thing, but do it really well.
pg491